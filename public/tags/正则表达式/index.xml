<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则表达式 on KiWaTo</title>
    <link>https://kangzhiqing.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>Recent content in 正则表达式 on KiWaTo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jan 2019 17:51:53 +0800</lastBuildDate><atom:link href="https://kangzhiqing.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RegExp</title>
      <link>https://kangzhiqing.com/post/regexp/</link>
      <pubDate>Wed, 23 Jan 2019 17:51:53 +0800</pubDate>
      
      <guid>https://kangzhiqing.com/post/regexp/</guid>
      <description>Regular Expression
正则表达式：匹配特殊字符或有特殊搭配原则的字符的最佳选择 创建方式  直接量 new RegExp();  // 直接量 var reg = /abc/ ; // new RegExp(); var reg = new RegExp(pattern. attribute); var reg = new RegExp(&amp;#34;abc&amp;#34;,&amp;#34;i&amp;#34;) var reg = new RegExp(/abc/i); 修饰符 /i ignoreCase 忽视大小写 /g global 全局匹配 /m multiline 多行匹配
常用方法 str.match(reg) // 返回匹配成功的结果数组 str.search(reg) // 返回匹配到的位置，匹配不到返回-1 str.split(reg) str.replace(reg, newStr/function(){}) reg.test(str) // 匹配返回true，不匹配则返回false reg.exec() // 常用规则 \w ==&amp;gt; [0-9A-z_] \W ==&amp;gt; [^\w] \d ==&amp;gt; [0-9] \D ==&amp;gt; [^\d] \s ==&amp;gt; [\n\f\r\t\v] 空白字符 \S ==&amp;gt; [^\s] \b ==&amp;gt; 单词边界 /\bc/ 以c开头的单词 \B ==&amp;gt; 非单词边界 .</description>
    </item>
    
  </channel>
</rss>
